names_to = "error_type", values_to = "log10 ( MAP parameter / true parameter )") %>%
mutate(`log10 ( MAP parameter / true parameter )` = log10(`log10 ( MAP parameter / true parameter )`)) %>%
filter(obs_model == "Chemo observation") %>%
mutate(obs_model = str_replace(obs_model, " ","~"))
a = data4 %>%
filter(s_real == 0.001 & mu_real == 1e-5) %>%
ggplot(aes(error_type,`log10 ( MAP parameter / true parameter )`, color=mod_method)) +
geom_boxplot(outlier.shape = NA, position = position_dodge2(width=1))+
scale_color_manual(values=color_vec,
name="Inference model\nand method",
breaks=mod_meth) +
geom_beeswarm(aes(fill=mod_method, shape = as.factor(presim_rep)), dodge.width = .75, alpha = 0.5) +
scale_shape_manual(values = c(21, 22, 23), name = "Training set") +
scale_fill_manual(values=color_vec,
name="",
limits=mod_meth, guide = 'none') +
ylab("log10 ( MAP / true )") +
xlab("") +
facet_wrap(~sim_params, labeller=label_parsed, scales = "free") +
scale_x_discrete(labels=c("s_ratio"  = expression(italic("s"[C])),
"mu_ratio" = expression(italic(delta[C])))) +
#"total_rel_error"  = "total")) +
#xlab("Relative error type") +
theme(panel.spacing.y=unit(1, "lines"),panel.spacing.x=unit(1, "lines")) +
ggtitle("A") +
geom_hline(yintercept = 0, alpha = 0.5) +
theme(legend.position = "none") +
geom_hline(yintercept = c(-1,1), alpha = 1, linetype = "dotted")
a
layout <- "
ABCD
"
fig4 = a + b + c + d +
plot_layout(design = layout)
fig4
ggsave(paste0(fig_path,"Figure4.pdf"), plot = fig4, width = 18, height = 6, units = "in")
ggsave(paste0(fig_path,"Figure4.png"), plot = fig4, width = 18, height = 6, units = "in")
library(tidyverse)
library(patchwork)
library(scales)
library(ggbeeswarm)
library(reticulate)
theme_set(theme_classic(base_size = 21))
file_dir = "/Volumes/GoogleDrive/.shortcut-targets-by-id/19NQRq-XLPpjqJGmLbP4MHRjala2WVahk/Avecilla et al Simulating CNV evolution/scripts/cnv_sim_inf_old/hpc_output/test_performance/multi/"
fig_path = "/Volumes/GoogleDrive/.shortcut-targets-by-id/19NQRq-XLPpjqJGmLbP4MHRjala2WVahk/Avecilla et al Simulating CNV evolution/figures/"
read_est_params = function(x) {
if(str_detect(x, "NPE")==TRUE){
file = read_csv(x, col_names = c("Model","Method","col_to_sep",
"s_est","mu_real",
"mu_est","s_snv","m_snv","rmse_map",
"mean_rmse_ppc","rmse95_low_ppc","rmse95_hi_ppc",
"corr_map",
"mean_corr_ppc","corr95_low_ppc", "corr95_hi_ppc",
"fit_95hdi_low","fit_95hdi_high",
"mut_95hdi_low","mut_95hdi_high",
"aic", "dic", "waic1", "waic2")) %>%
separate(col_to_sep, into = c(NA,NA,NA,"n_presim", "presim_rep","s_real","s_real2"),
sep="([_.])") %>%
mutate(s_real = paste(str_remove(s_real, "csv"), s_real2,sep = ".")) %>%
select(-s_real2) %>%
mutate(s_est_10 = s_est, s_real_10 = as.numeric(s_real),
mu_est_10 = mu_est, mu_real_10 = mu_real,
s_est = 10^s_est, s_real = 10^as.numeric(s_real),
mu_est = 10^mu_est, mu_real = 10^mu_real) %>%
mutate(mu_ratio = mu_est/mu_real, s_ratio = s_est/s_real,
mu_diff = mu_est - mu_real, s_diff = s_est - s_real) %>%
mutate(flow_type = if_else(str_detect(x, "nsf"), "NSF", "MAF"))
}
if(str_detect(x, "pyABC")==TRUE) {
file = read_csv(x, col_names = c("Model","Method","col_to_sep",
"s_est","mu_real",
"mu_est","s_snv","m_snv","rmse_map",
"mean_rmse_ppc","rmse95_low_ppc","rmse95_hi_ppc",
"corr_map",
"mean_corr_ppc","corr95_low_ppc", "corr95_hi_ppc",
"fit_95hdi_low","fit_95hdi_high",
"mut_95hdi_low","mut_95hdi_high",
"aic", "dic", "waic1", "waic2")) %>%
separate(col_to_sep, into = c("n_presim","s_real"),
sep="([-])") %>%
mutate(s_real = as.numeric(s_real)*-1) %>%
mutate(presim_rep = case_when(str_detect(x, "_1_") ~ "1",
str_detect(x, "_2_") ~ "2",
str_detect(x, "_3_") ~ "3")) %>%
select("Model","Method","n_presim", "presim_rep","s_real",
"s_est","mu_real",
"mu_est","s_snv","m_snv","rmse_map",
"mean_rmse_ppc","rmse95_low_ppc","rmse95_hi_ppc",
"corr_map",
"mean_corr_ppc","corr95_low_ppc", "corr95_hi_ppc",
"fit_95hdi_low","fit_95hdi_high",
"mut_95hdi_low","mut_95hdi_high",
"aic", "dic", "waic1", "waic2") %>%
mutate(s_est_10 = s_est, s_real_10 = as.numeric(s_real),
mu_est_10 = mu_est, mu_real_10 = mu_real,
s_est = 10^s_est, s_real = 10^as.numeric(s_real),
mu_est = 10^mu_est, mu_real = 10^mu_real) %>%
mutate(mu_ratio = mu_est/mu_real, s_ratio = s_est/s_real,
mu_diff = mu_est - mu_real, s_diff = s_est - s_real) %>%
mutate(flow_type = NA) %>%
mutate(n_presim = if_else(n_presim == "100", "10000", "100000"))
}
return(file)
}
read_est_params_single = function(x) {
data = read_est_params(x)
data = data %>%
mutate(obs_set = str_extract(x, pattern="\\w+.([0-1]+)_([mut57]+)"))
return(data)
}
read_est_params_multi = function(x) {
if(str_detect(x, "NPE")==TRUE){
file = read_csv(x, col_names = c("obs_set", "held_out","Model","Method","col_to_sep",
"shape_est","scale_real","scale_est","mu_real",
"mu_est","s_snv","m_snv",
"mean_rmse_ppc","rmse95_low_ppc","rmse95_hi_ppc",
"mean_corr_ppc","corr95_low_ppc", "corr95_hi_ppc",
"shape_95hdi_low","shape_95hdi_high",
"scale_95hdi_low","scale_95hdi_high",
"mut_95hdi_low","mut_95hdi_high",
"aic", "dic", "waic1", "waic2",
"var_observation", "var_ppc")) %>%
separate(col_to_sep, into = c(NA,NA,NA,NA,"n_presim", "presim_rep","shape_real"),
sep="([_.])") %>%
mutate(shape_real = as.numeric(str_remove(shape_real, "csv"))) %>%
mutate(scale_est_10 = scale_est, scale_real_10 = scale_real,
mu_est_10 = mu_est, mu_real_10 = mu_real,
scale_est = 10^scale_est, scale_real = 10^scale_real,
mu_est = 10^mu_est, mu_real = 10^mu_real) %>%
mutate(flow_type = if_else(str_detect(x, "nsf"), "NSF", "MAF"))
}
if(str_detect(x, "ABC")==TRUE) {
file = read_csv(x, col_names = c("obs_set", "held_out","Model","Method","col_to_sep",
"shape_est","scale_real","scale_est","mu_real",
"mu_est","s_snv","m_snv",
"mean_rmse_ppc","rmse95_low_ppc","rmse95_hi_ppc",
"mean_corr_ppc","corr95_low_ppc", "corr95_hi_ppc",
"shape_95hdi_low","shape_95hdi_high",
"scale_95hdi_low","scale_95hdi_high",
"mut_95hdi_low","mut_95hdi_high",
"aic", "dic", "waic1", "waic2",
"var_observation", "var_ppc")) %>%
mutate(n_presim = if_else(col_to_sep%%2 == 0,
as.numeric(str_sub(as.character(col_to_sep), end=-3)),
as.numeric(str_sub(as.character(col_to_sep), end=-2)))) %>%
mutate(shape_real = if_else(col_to_sep%%2 == 0, 10,1)) %>%
mutate(presim_rep = case_when(str_detect(x, "_1_") ~ "1",
str_detect(x, "_2_") ~ "2",
str_detect(x, "_3_") ~ "3")) %>%
select("obs_set", "held_out","Model","Method","n_presim", "presim_rep","shape_real",
"shape_est","scale_real","scale_est","mu_real",
"mu_est","s_snv","m_snv",
"mean_rmse_ppc","rmse95_low_ppc","rmse95_hi_ppc",
"mean_corr_ppc","corr95_low_ppc", "corr95_hi_ppc",
"shape_95hdi_low","shape_95hdi_high",
"scale_95hdi_low","scale_95hdi_high",
"mut_95hdi_low","mut_95hdi_high",
"aic", "dic", "waic1", "waic2","var_observation", "var_ppc") %>%
mutate(scale_est_10 = scale_est, scale_real_10 = scale_real,
mu_est_10 = mu_est, mu_real_10 = mu_real,
scale_est = 10^scale_est, scale_real = 10^scale_real,
mu_est = 10^mu_est, mu_real = 10^mu_real) %>%
mutate(flow_type = "") %>%
mutate(n_presim = if_else(n_presim == "100", "10000", "100000"))
}
return(file %>% mutate(obs_set = str_extract(obs_set, "\\w+.([0-1]+)_([mut57]+)")))
}
files = list.files(path = paste0(file_dir,"param_estimates_single_multi/"), pattern = '*est_real_params.csv')
files = paste0(file_dir, "param_estimates_single_multi/", files)
data_list = map(files,read_est_params_single)
single_data_all = do.call(rbind, data_list)
files = list.files(path = paste0(file_dir,"param_estimates_multi_multi/"), pattern = '*est_real_params.csv')
files = paste0(file_dir, "param_estimates_multi_multi/", files)
data_list = map(files,read_est_params_multi)
multi_data_all = do.call(rbind, data_list)
single_data = single_data_all %>% filter(n_presim == "100000" & flow_type == "NSF" & Model == "WF") %>%
unite(mod_method, Model, Method, sep = " ", remove=F) %>%
unite(sim_params,s_real, mu_real, remove = F) %>%
mutate(alpha_real = if_else(str_detect(obs_set,"shape1_"), 1, 10),
beta_real = case_when(str_detect(obs_set, "scale0.001")~ 0.001,
str_detect(obs_set, "scale0.0001")~ 0.0001,
str_detect(obs_set, "scale0.01")~ 0.01,
str_detect(obs_set, "scale0.1")~ 0.1))
multi_data = multi_data_all %>%filter(n_presim == "100000" & flow_type == "NSF" & Model == "WF") %>%
mutate(es = shape_real*scale_real) %>%
unite(sim_params,es, mu_real, remove = F) %>%
mutate(es_est = shape_est*scale_est)
color_vec = c("#4daf4a", "#984ea3","#e41a1c", "#377eb8", "black")
mod_meth = c("Chemo NPE", "WF NPE", "Chemo ABC-SMC", "WF ABC-SMC", "Pseudo-observation")
obs_names = unique(single_data$obs_set)
py$single_inferred_dfe
py$kl_div
py$pd
py$p
py$kl_div
py$kl_div
py$kl_div
py$kl_div
py$kl_div
multi_data$sim_params = factor(multi_data$sim_params, levels = c("0.001_1e-05", "0.001_1e-07", "0.1_1e-05", "0.1_1e-07"),
ordered = TRUE, labels=c(expression(atop("s = 0.001,", paste(delta, "  = 1e-5"))),
expression(atop("s = 0.001,", paste(delta, "  = 1e-7"))),
"0.1_1e-05"  = expression(atop("s = 0.1,", paste(delta, "  = 1e-5"))),
"0.1_1e-07"  = expression(atop("s = 0.1,", paste(delta, "  = 1e-7")))))
plot_dist = function(x, legend=TRUE) {
temp = multi_data %>%
filter(obs_set == x)
temp2 = py$single_inferred_dfe %>%
filter(obs_set == x)
if(temp$es[1] == 0.1) {
d = data.frame(x = seq(0,1, length.out = 100))
bw=0.1
y_ann = 7.5
x_ann = 0.75
}
if(temp$es[1] == 0.001) {
d = data.frame(x = seq(0,0.04, length.out =  100))
bw=0.001
y_ann=1000
x_ann=0.03
}
p = ggplot(data = d, aes(x)) +
#geom_histogram(data = temp2, aes(x = value, fill = s_type), alpha = 0.5, binwidth=bw) +
stat_function(fun = function(x)
{dgamma(x, shape = temp$shape_real[1], scale = temp$scale_real[1])},# * 20 * bw},
aes(colour = "True DFE"), size = 2, alpha=1) +
stat_function(fun = function(x)
{dgamma(x, shape = temp$shape_est[1], scale = temp$scale_est[1])},# * 20 * bw},
aes(colour = "Observation set DFE"), size = 1, alpha = 0.6) +
stat_function(fun = function(x)
{dgamma(x, shape = temp$shape_est[2], scale = temp$scale_est[2])},# * 20 * bw},
aes(colour = "Observation set DFE"), size = 1, alpha = 0.6) +
stat_function(fun = function(x)
{dgamma(x, shape = temp$shape_est[3], scale = temp$scale_est[3])},# * 20 * bw},
aes(colour = "Observation set DFE"), size = 1, alpha = 0.6) +
#####
stat_function(fun = function(x)
{dgamma(x, shape = temp2$single_alpha[1], scale = temp2$single_beta[1])},# * 20 * bw},
aes(colour = "Single observation DFE"), size = 1, alpha = 0.6) +
stat_function(fun = function(x)
{dgamma(x, shape = temp2$single_alpha[2], scale = temp2$single_beta[2])},# * 20 * bw},
aes(colour = "Single observation DFE"), size = 1, alpha = 0.6) +
stat_function(fun = function(x)
{dgamma(x, shape = temp2$single_alpha[3], scale = temp2$single_beta[3])},# * 20 * bw},
aes(colour = "Single observation DFE"), size = 1, alpha = 0.6) +
scale_color_manual(breaks = c("True DFE","Observation set DFE",
"Single observation DFE"), name = "",
#values=c("#453781", "#1f968b", "#75d054")) +
values=c("black", "darkgreen", "blue")) +
xlab(expression(paste("selection coefficient, ",italic("s"[C])))) +
ylab("density") +
annotate("text",label=as.expression(bquote(atop("E(s)="~.(temp$es[1])~",",delta[C]~"= "~.(temp$mu_real[1])))),
x=x_ann, y = y_ann, size=6)
if(legend == TRUE) {
return(p)
}
else {
return(p + theme(legend.position = "none"))
}
}
plot_list = list()
i=1
al = c("A", "B","C","D","A", "B","C","D")
for(obs in unique(single_data$obs_set)) {
#print(plot_dist(obs))
plot_list[[i]] = plot_dist(obs, legend = FALSE) + ggtitle(al[i])
i=i+1
}
plot_list[[4]] = plot_dist(unique(single_data$obs_set)[4], legend = TRUE) + ggtitle(al[4])
plot_list[[8]] = plot_dist(unique(single_data$obs_set)[8], legend = TRUE) + ggtitle(al[8])
fig5 = plot_list[[1]] + plot_list[[2]] + plot_list[[3]] + plot_list[[4]]
fig5
ggsave(paste0(fig_path,"Figure5.pdf"), plot = fig5, width = 20, height = 10, units = "in")
ggsave(paste0(fig_path,"Figure5.png"), plot = fig5, width = 20, height = 10, units = "in")
supp = plot_list[[5]] + plot_list[[6]] + plot_list[[7]] + plot_list[[8]]
supp
ggsave(paste0(fig_path,"SupplementaryFig6.pdf"), plot = supp, width = 20, height = 10, units = "in")
ggsave(paste0(fig_path,"SupplementaryFig6.png"), plot = supp, width = 20, height = 10, units = "in")
library(tidyverse)
library(patchwork)
library(groupdata2)
library(ggridges)
theme_set(theme_classic(base_size = 21))
bar_dir = "/Volumes/GoogleDrive/.shortcut-targets-by-id/19NQRq-XLPpjqJGmLbP4MHRjala2WVahk/Avecilla et al Simulating CNV evolution/scripts/cnv_sim_inf_old/barcode_method/"
param_dir = "/Volumes/GoogleDrive/.shortcut-targets-by-id/19NQRq-XLPpjqJGmLbP4MHRjala2WVahk/Avecilla et al Simulating CNV evolution/scripts/cnv_sim_inf_old/hpc_output/Lauer2018/"
fit_dir = "/Volumes/GoogleDrive/.shortcut-targets-by-id/19NQRq-XLPpjqJGmLbP4MHRjala2WVahk/Avecilla et al Simulating CNV evolution/scripts/cnv_sim_inf_old/fitness_assays/"
fig_path = "/Volumes/GoogleDrive/.shortcut-targets-by-id/19NQRq-XLPpjqJGmLbP4MHRjala2WVahk/Avecilla et al Simulating CNV evolution/figures/"
cnv_barcodes = read_csv(paste0(bar_dir,"CNV_barcodes.csv")) %>%
mutate(CNV = "CNV")
read_est_params = function(x) {
if(str_detect(x, "NPE")==TRUE){
file = read_csv(x, col_names = c("Model","Method","col_to_sep","col_to_sep2",
"mu_est","s_snv","m_snv","rmse_map",
"mean_rmse_ppc","rmse95_low_ppc","rmse95_hi_ppc",
"corr_map",
"mean_corr_ppc","corr95_low_ppc", "corr95_hi_ppc",
"fit_95hdi_low","fit_95hdi_high",
"mut_95hdi_low","mut_95hdi_high",
"aic", "dic", "waic1", "waic2")) %>%
separate(col_to_sep, into = c(NA,NA,NA,"n_presim", "presim_rep"),
sep="([_.])") %>%
separate(col_to_sep2, into = c("Population", "s_est"),
sep="([-])") %>%
mutate(s_est_10 = as.numeric(s_est)*-1,
mu_est_10 = mu_est,
s_est = 10^(as.numeric(s_est)*-1),
mu_est = 10^mu_est) %>%
mutate(flow_type = if_else(str_detect(x, "nsf"), "NSF", "MAF"))
}
if(str_detect(x, "ABC")==TRUE) {
file = read_csv(x, col_names = c("Model","Method","n_presim","col_to_sep",
"mu_est","s_snv","m_snv","rmse_map",
"mean_rmse_ppc","rmse95_low_ppc","rmse95_hi_ppc",
"corr_map",
"mean_corr_ppc","corr95_low_ppc", "corr95_hi_ppc",
"fit_95hdi_low","fit_95hdi_high",
"mut_95hdi_low","mut_95hdi_high",
"aic", "dic", "waic1", "waic2")) %>%
separate(col_to_sep, into = c("Population", "s_est"),
sep="([-])") %>%
mutate(presim_rep = case_when(str_detect(x, "_1_") ~ "1",
str_detect(x, "_2_") ~ "2",
str_detect(x, "_3_") ~ "3")) %>%
mutate(s_est_10 = as.numeric(s_est)*-1,
mu_est_10 = mu_est,
s_est = 10^(as.numeric(s_est)*-1),
mu_est = 10^mu_est) %>%
select("Model","Method","n_presim", "presim_rep","Population",
"s_est","mu_est","s_snv","m_snv","rmse_map",
"mean_rmse_ppc","rmse95_low_ppc","rmse95_hi_ppc",
"corr_map",
"mean_corr_ppc","corr95_low_ppc", "corr95_hi_ppc",
"fit_95hdi_low","fit_95hdi_high",
"mut_95hdi_low","mut_95hdi_high",
"aic", "dic", "waic1", "waic2", "s_est_10", "mu_est_10") %>%
mutate(flow_type = NA) %>%
mutate(n_presim = if_else(n_presim == 100, "10000", "100000"))
}
return(file)
}
read_est_params = function(x) {
if(str_detect(x, "NPE")==TRUE){
file = read_csv(x, col_names = c("Model","Method","col_to_sep","col_to_sep2",
"mu_est","s_snv","m_snv","rmse_map",
"mean_rmse_ppc","rmse95_low_ppc","rmse95_hi_ppc",
"corr_map",
"mean_corr_ppc","corr95_low_ppc", "corr95_hi_ppc",
"fit_95hdi_low","fit_95hdi_high",
"mut_95hdi_low","mut_95hdi_high",
"aic", "dic", "waic1", "waic2")) %>%
separate(col_to_sep, into = c(NA,NA,NA,"n_presim", "presim_rep"),
sep="([_.])") %>%
separate(col_to_sep2, into = c("Population", "s_est"),
sep="([-])") %>%
mutate(s_est_10 = as.numeric(s_est)*-1,
mu_est_10 = mu_est,
s_est = 10^(as.numeric(s_est)*-1),
mu_est = 10^mu_est) %>%
mutate(flow_type = if_else(str_detect(x, "nsf"), "NSF", "MAF"))
}
if(str_detect(x, "ABC")==TRUE) {
file = read_csv(x, col_names = c("Model","Method","n_presim","col_to_sep",
"mu_est","s_snv","m_snv","rmse_map",
"mean_rmse_ppc","rmse95_low_ppc","rmse95_hi_ppc",
"corr_map",
"mean_corr_ppc","corr95_low_ppc", "corr95_hi_ppc",
"fit_95hdi_low","fit_95hdi_high",
"mut_95hdi_low","mut_95hdi_high",
"aic", "dic", "waic1", "waic2")) %>%
separate(col_to_sep, into = c("Population", "s_est"),
sep="([-])") %>%
mutate(presim_rep = case_when(str_detect(x, "_1_") ~ "1",
str_detect(x, "_2_") ~ "2",
str_detect(x, "_3_") ~ "3")) %>%
mutate(s_est_10 = as.numeric(s_est)*-1,
mu_est_10 = mu_est,
s_est = 10^(as.numeric(s_est)*-1),
mu_est = 10^mu_est) %>%
select("Model","Method","n_presim", "presim_rep","Population",
"s_est","mu_est","s_snv","m_snv","rmse_map",
"mean_rmse_ppc","rmse95_low_ppc","rmse95_hi_ppc",
"corr_map",
"mean_corr_ppc","corr95_low_ppc", "corr95_hi_ppc",
"fit_95hdi_low","fit_95hdi_high",
"mut_95hdi_low","mut_95hdi_high",
"aic", "dic", "waic1", "waic2", "s_est_10", "mu_est_10") %>%
mutate(flow_type = NA) %>%
mutate(n_presim = if_else(n_presim == 100, "10000", "100000"))
}
return(file)
}
bc04 = read_csv(paste0(bar_dir,'2021-09_data_analysis/data_bc04/bc04_cluster.csv'),
col_names = c("barcode", "g5","g37","g62","g99","g124","g149"))
bc04_filtered_barcodes = read_csv(paste0(bar_dir,'./2021-09_data_analysis/data_bc04/bc04_bcfiltered_barcodes.csv'),
col_names = F)
bc_04_filtered = bc04 %>%
#select only lineages that made it through the filter for dfe
filter(barcode %in% bc04_filtered_barcodes$X1) %>%
mutate(population = "bc01")
bc_04_freq = bc_04_filtered %>%
#convert from reads to relative frequency
mutate(g5 = g5/sum(g5),
g37 = g37/sum(g37),
g62 = g62/sum(g62),
g99 = g99/sum(g99),
g124 = g124/sum(g124),
g149 = g149/sum(g149)) %>%
pivot_longer(cols=starts_with("g"), names_to = "generation", values_to = "relative_freq") %>%
mutate(generation = str_remove(generation, "g")) %>%
mutate(cell_number = relative_freq*3e8)
#filter out ugly lineages for plotting
alldata = bc_04_filtered %>%
left_join(cnv_barcodes, by= c("barcode" = "barcode", "population"="population")) %>%
filter(g5 > 0) %>%
filter(!(g37 == 0 & g62 >0)) %>%
filter(!(g62 == 0 & g99 >0)) %>%
filter(!(g99 == 0 & g124 >0)) %>%
filter(!(g124 == 0 & g149 >0)) %>%
mutate(CNV = if_else(is.na(CNV), "noCNV", "CNV")) %>%
mutate(g5 = g5/sum(g5),
g37 = g37/sum(g37),
g62 = g62/sum(g62),
g99 = g99/sum(g99),
g124 = g124/sum(g124),
g149 = g149/sum(g149)) %>%
pivot_longer(cols=starts_with("g"), names_to = "generation", values_to = "relative_freq") %>%
mutate(generation = str_remove(generation, "g")) %>%
mutate(cell_number = relative_freq*3e8)
dfe = read_csv(paste0(bar_dir, "2021-09_data_analysis/bc04_v2_a_MutSeq_Result.csv")) %>%
bind_cols(bc04_filtered_barcodes) %>%
rename(barcode = X1) %>%
mutate(population = "bc01") %>%
left_join(cnv_barcodes, by= c("barcode" = "barcode", "population"="population")) %>%
mutate(CNV = if_else(is.na(CNV), "noCNV", "CNV"))
## summary ##
dfe %>%
mutate(adaptive = if_else(Mutation_Fitness > 0, "adaptive", "neutral")) %>%
group_by(population, CNV, adaptive) %>%
summarize(n_lineages = n())
param_files = list.files(path = paste0(param_dir, "single116/param_estimates/"), pattern = '*est_real_params.csv')
param_files = paste0(param_dir, "single116/param_estimates/", param_files)
param_list = map(param_files,read_est_params)
param_all = do.call(rbind, param_list)
fit_data = read_csv(paste0(fit_dir, "clone_fitness_pergen.csv")) %>%
filter(!(str_detect(clone, "DGY1657"))) #remove ancestor
fit_for_regress = read_csv(paste0(fit_dir,"data_props_Lauer2018.csv"))
a = alldata %>%
mutate(survival = if_else(generation == "149" & cell_number == 0,"extinct", "survives")) %>%
ggplot(aes(as.numeric(generation), cell_number, group=barcode, color=CNV, alpha = survival)) +
geom_line() +
scale_y_log10("Number of cells",
breaks = scales::trans_breaks("log10", function(x) 10^x),
labels = scales::trans_format("log10", scales::math_format(10^.x)),
limits = c(1, 1e8)) +
theme_minimal(base_size = 15) +
scale_color_manual(values = c("CNV" = "#6DB966", "noCNV" = "grey"), name = "",
labels = c("Lineage with CNV", "Lineage without CNV")) +
scale_alpha_manual(values = c("extinct"=0.005, "survives"=0.25), guide = FALSE) +
xlab("Generation") +
theme(legend.position="top")
a
b = fit_for_regress %>%
filter(strain == "DGY1734") %>%
ggplot(aes(hours, transformed)) +
geom_smooth(method = "lm") +
ylab("log( CNV / ancestor )") +
theme_classic(base_size = 16) +
geom_point(aes(shape = run)) +
scale_shape_discrete(labels = c("Replicate 1", "Replicate 2"), name= "") +
theme(strip.text.x = element_blank(),
strip.background = element_rect(colour="white", fill="white"),
legend.position=c(.3,.75)
) +
xlab("Hours")
b
p_data = param_all %>%
filter(Method == "NPE" & flow_type == "NSF" & n_presim == "100000") %>%
mutate(Model = case_when(Model == "Chemo"~"Chemo NPE",
Model == "WF"~"WF NPE")) %>%
select(Population, presim_rep, s_est, Model) %>%
bind_rows(dfe %>%
filter(CNV == "CNV" & Mutation_Fitness >0) %>%
mutate(Model = "Lineage tracking", presim_rep = "", s_est = Mutation_Fitness, Population = population) %>%
select(Population, presim_rep, s_est, Model)) %>%
bind_rows(fit_data %>%
filter(fitness_coef > 0) %>%
mutate(Model = "Competition assays", presim_rep = "",
s_est = fitness_coef, Population = clone) %>%
select(Population, presim_rep, s_est, Model)) %>%
mutate(Model = fct_relevel(Model, levels = "Lineage tracking", "Fitness assays",
"Chemo NPE", "WF NPE"))
c = p_data %>%
ggplot(aes(x = s_est, y = fct_rev(Model), group =Model, fill = Model )) +
geom_density_ridges2(stat = "binline", bins=25, scale = 1) +
#geom_histogram() +
scale_y_discrete(expand = c(0, 0)) +
scale_x_continuous(expand = c(0, 0), limits = c(0,0.2)) +
coord_cartesian(clip = "off") +
theme_ridges(center_axis_labels = TRUE) +
xlab(expression(paste("Selection coefficient, ", italic("s"[C])))) +
ylab("") +
#scale_x_log10() +
theme(legend.position = "none") +
scale_fill_manual(values = c("Competition assays" = "grey","Lineage tracking"="#a6cee3", "Chemo NPE" = "#4daf4a", "WF NPE" = "#984ea3"))
c
layout <- "
AC
BC
"
fig7 = a + b + c +plot_annotation(tag_levels = 'A') + plot_layout(design = layout)
ggsave(paste0(fig_path,"Figure7.pdf"), plot = fig7, width = 13, height = 7, units = "in")
ggsave(paste0(fig_path,"Figure7.png"), plot = fig7, width = 13, height = 7, units = "in")
